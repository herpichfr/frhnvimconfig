# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=5000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ "${debian_chroot:-}" = "" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ "$force_color_prompt" != "" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

# define my own colors
export C_RED='\e[01;31m'
export C_GREEN='\e[01;32m'
export C_BLUE='\e[01;34m'
export C_YELLOW='\e[01;33m'
export C_CYAN='\e[01;36m'
export C_BLACK='\e[01;30m'
export C_BLACK_BLACK='\e[30;40m'
export C_YELLOW_BG='\e[30;43m'
export C_YELLOW_BLUE='\e[43;44m'
export C_BLUEBG_LIGHTGREEN=$'\e[92;44m'
export C_BLUEBG_LIGHTBLACK=$'\e[90;44m'
export C_BLACKFG_BLUEBG=$'\e[30;44m'
export C_BLACKBG_BLUEFG=$'\e[34;40m'
export C_BLACKBG_GRAYFG=$'\e[90;40m'
export C_WHITE_BLUE='\e[37;44m'
export C_BLACK_WHITE='\e[30;47m'
export C_CYANBG_BLACKFG=$'\e[30;46m'
export C_GRAYBG_BYELLOWFG=$'\e[93;100;1m'
# reset background and text color
export C_RESET='\e[0m'

# create some nice symbols
export ARROW=$'\ue0b0'
# export SMALL_ARROW=$'󰞔 '
export SMALL_ARROW=$'󰜴'
export FWD_ARROW=$'\uE0B1'
export GIT_SYMBOL=$'\uE0A0'
export TERMINAL_BADGE=$'\uf120'
export TERMINAL_TMUX=$'\uebc8'
export LINUX_UBUNTU=$'\uf31b'
export LINUX_ARCH=$'\uebc6'
export PYENV_SYMBOL=$'\ue73c'

# get if current directory is a git repo and branch
function _parse_git_branch {
    GITREPO=$(git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')
    if [[ ! "$GITREPO" == "" ]];
    then
        if [[ "$(git status 2> /dev/null | tail -n1)" == "nothing to commit, working tree clean" ]];
        then
            if [[ "$(git status 2> /dev/null | grep -o 'Your branch is ahead of')" == "Your branch is ahead of" ]];
            then
                GITSTATUS="󰜷"
                printf "${C_YELLOW_BG}${ARROW} ${C_RED}${GIT_SYMBOL} ${C_RED}%s %s ${C_YELLOW_BLUE}${C_YELLOW}${ARROW}" "$GITREPO" "$GITSTATUS"
            elif [[ "$(git status 2> /dev/null | grep -o 'Your branch is behind')" == "Your branch is behind" ]];
            then
                GITSTATUS="󰜮"
                printf "${C_YELLOW_BG}${ARROW} ${C_RED}${GIT_SYMBOL} ${C_RED}%s %s ${C_YELLOW_BLUE}${C_YELLOW}${ARROW}" "$GITREPO" "$GITSTATUS"
            elif [[ "$(git status 2> /dev/null | grep -o 'Your branch is up-to-date')" == "Your branch is up-to-date" ]];
            then
                GITSTATUS=""
                printf "${C_BLACK_WHITE}${ARROW} ${C_BLUE}${GIT_SYMBOL} ${C_BLUE}%s ${C_WHITE_BLUE}${ARROW}" "$GITREPO"
            elif [[ "$(git status 2> /dev/null | wc -l)" < "3" ]]; then
                GITSTATUS=""
                printf "${C_BLACK_WHITE}${ARROW} ${C_BLUE}${GIT_SYMBOL} ${C_BLUE}%s ${C_WHITE_BLUE}${ARROW}" "$GITREPO"
            else
                GITSTATUS=" "
                printf "${C_YELLOW_BG}${ARROW} ${C_RED}${GIT_SYMBOL} ${C_RED}%s %s ${C_YELLOW_BLUE}${C_YELLOW}${ARROW}" "$GITREPO" "$GITSTATUS"
            fi
        else
            if [[ "$(git status 2> /dev/null | grep -o 'no changes added to commit')" == "no changes added to commit" ]]; then
                GITSTATUS=$'\ueafc'
                printf "${C_YELLOW_BG}${ARROW} ${C_RED}${GIT_SYMBOL} ${C_RED}%s %s ${C_YELLOW_BLUE}${C_YELLOW}${ARROW}" "$GITREPO" "$GITSTATUS"
            elif [[ "$(git status 2> /dev/null | grep -o 'nothing added to commit but untracked files present')" == "nothing added to commit but untracked files present" ]]; then
                GITSTATUS=$'\uf127'
                printf "${C_BLACK_WHITE}${ARROW} ${C_BLUE}${GIT_SYMBOL} ${C_BLUE}%s %s ${C_WHITE_BLUE}${ARROW}" "$GITREPO" "$GITSTATUS"
            else
                GITSTATUS=" "
                printf "${C_YELLOW_BG}${ARROW} ${C_RED}${GIT_SYMBOL} ${C_RED}%s %s ${C_YELLOW_BLUE}${C_YELLOW}${ARROW}" "$GITREPO" "$GITSTATUS"
            fi
        fi
    else
        printf '%s' "${C_BLACKFG_BLUEBG}${ARROW}"
    fi
}

function _get_python_venv {
    if [[ -n "$VIRTUAL_ENV" ]]; then
        printf "${C_GRAYBG_BYELLOWFG}${PYENV_SYMBOL} %s ${C_BLACKBG_GRAYFG}${ARROW}" "$(basename "$VIRTUAL_ENV")"
    else
        printf ""
    fi
}

function _update_ps1() {
    if [[ "$PWD" == "$HOME" ]]; then
        SHORT_PATH=$(printf "%s %s" "$C_BLUEBG_LIGHTGREEN" "$C_BLUEBG_LIGHTGREEN")
    elif [[ $PWD == $HOME* ]]; then
        SHORT_PATH=$(printf "${C_BLUEBG_LIGHTGREEN} / %s" "${PWD##*herpich/}" | sed "s|/| ${C_BLUEBG_LIGHTBLACK}${FWD_ARROW}${C_BLUEBG_LIGHTGREEN} |g")
    else
        SHORT_PATH=$(printf "${C_BLUEBG_LIGHTGREEN}%s" "${PWD##*herpich/}" | sed "s|/| ${C_BLUEBG_LIGHTBLACK}${FWD_ARROW}${C_BLUEBG_LIGHTGREEN} |g")
    fi
    # SHORT_PATH=$(printf "${C_BLUEBG_LIGHTGREEN}%s" "${PWD##*herpich/}" | sed "s|/| ${C_BLUEBG_LIGHTBLACK}${FWD_ARROW}${C_BLUEBG_LIGHTGREEN} |g")
    # PS1="${debian_chroot:+($debian_chroot)}$(_get_python_venv)${C_BLACK_BLACK}\[\e[01;33m\]\n[\A]\[${C_GREEN}\]\h@password $(_parse_git_branch) ${SHORT_PATH} ${C_BLACKBG_BLUEFG}${ARROW}${C_RESET}\n ${C_RED}☢ ${C_CYAN}${TERMINAL_TMUX} ${LINUX_UBUNTU} ${LINUX_ARCH} ${TERMINAL_BADGE} ${SMALL_ARROW}${C_RESET} "
    PS1="${debian_chroot:+($debian_chroot)}$(_get_python_venv) ${C_YELLOW}[\A]${C_GREEN}\h@password $(_parse_git_branch) ${SHORT_PATH} ${C_BLACKBG_BLUEFG}${ARROW}${C_RESET}\n ${C_RED}☢ ${C_CYAN}${TERMINAL_TMUX} ${LINUX_UBUNTU} ${LINUX_ARCH} ${TERMINAL_BADGE} ${SMALL_ARROW}${C_RESET} "
}
echo "$SHORT_PATH"

if [ "$color_prompt" = yes ]; then
    PROMPT_COMMAND="_update_ps1; $PROMPT_COMMAND"
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias ls='eza'
    alias dir='dir --color=auto'
    alias vdir='vdir --color=auto'
    
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='eza -lAh'
alias la='eza -A'
alias l='ls -CF'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# my aliases
alias rsync='rsync -avu --copy-unsafe-links --progress'
alias q='exit'
alias ej='eject'
alias pbcopy='xclip -selection clipboard'
alias pbpaste='xclip -selection clipboard -o'
alias astrovim='nvim'
alias vim='nvim'
alias cat='batcat'
alias find='fdfind'
alias rg='rg -p'

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# update PYTHONPATH with my packages dir
export PYTHONPATH="${PYTHONPATH}:$HOME/bin/hfit_funcs:$HOME/.local/lib/python3.10/site-packages:$HOME/.local/bin/"
export PATH="$HOME/.local/bin:$PATH"
export PATH="$HOME/.local/bin/lvim:$PATH"
export PATH="$HOME/.nvm/versions/node/v20.3.1/bin:$PATH"
export PATH="$HOME/bin:$PATH"

export TERM=screen-256color

# just for fun
echo -e "${C_RED}
                            .-@@@@@@@@@-.                         
                      .-@@@@@@@@@@@@@@@@@@@@@-.                     
                  .-@@@@@@@@@@@@     @@@@@@@@@@@@-.                
               .-@@@@@@@@.                  .@@@@@@@@-.             
             .-@@@@@@.                          .@@@@@@-.           
           .-@@@@.              ......              .@@@@-.         
         .-@@@@.           .-@@@@@@@@@@@@-.           .@@@@-.       
       .-@@@@.            '@@@@@@@@@@@@@@@@'            .@@@@-.     
      .-@@@.              @@@@@@@@@@@@@@@@@@              .@@@-.    
     .-@@@.               @@@@@@@@@@@@@@@@@@               .@@@-.   
    .-@@@. .-'@@@@@'-.    '@@@@@@@@@@@@@@@@'    .-'@@@@@'-. .@@@-.  
   .-@@@ .-@.      .@@,   .666-@@@@@@@@-666.   ,@@.      .@- .@@@-. 
  .-@@@. @@.        .@@@.  '@    '><'    @'  .@@@.        .@@ .@@@-.
  -@@@  .@@.         @@@. @@'-.-'@''@'-.-'@@ .@@@         .@@.  @@@-
 -@@@.   '@@'.-'     '@@@  '@@@@@'  '@@@@@'  @@@'     '-.'@@'   '@@@-
 -@@.     ''-''       '@@@  '@@@@-''-@@@@'  @@@'       ''-''     .@@-
 @@@'      .--@@@@-..   '@@@-. 88@@@@88 .-@@@'   ..-@@@@--.      .@@@
.@@@-    '@@@@@@^-@@@@',    ..-,'''''',-..    ,'@@@@-^@@@@@@'    -@@@.
 @@@.   '@@@@'      '@@@'--@@@@--    --@@@@--'@@@'      '@@@@'   .@@@
 -@@.   '@@@'        '@@@@''   ..,  ,..   ''@@@@'        '@@@'   .@@-
 -@@@'   '@'     ,     ''' .-@@@@,  ,@@@@-. '''     ,     '@'   '@@@-
  -@@@.   '@-    ,@    .'@@@@@@-'    '-@@@@@@'     @,    -@'   .@@@-
  .-@@@.   @@@   -@' ,@@@@.                .@@@@, '@-   @@@   .@@@-.
   .-@@@.  '@@@@@'' ,@@@-'     '-    -'     '-@@@, ''@@@@@'  .@@@-. 
    .-@@@.   '''    @@@@.       ''  ''       .@@@@    '''   .@@@-.  
     .-@@@.        @@@@.        '@  @'        .@@@@        .@@@-.   
      .-@@@.      '@@@@        .@@  @@.        @@@@'      .@@@-.    
       .-@@@@.     '@@@'      '@@'  '@@'      '@@@'     .@@@@.     
         .-@@@@.    -@@'.    @@@@    @@@@    .'@@-    .@@@@-.       
           .-@@@@.   '@@@...@@@-      -@@@...@@@'   .@@@@-.         
             .-@@@@@@. '--@@@@-'      '-@@@@--' @@@@@@@-.           
               .-@@@@@@@@                    @@@@@@@-.              
                  .-@@@@@@@@@@@@     @@@@@@@@@@@@-.
                      .-@@@@@@@@@@@@@@@@@@@@@-.
                            .-@@@@@@@@@-.

                         Welcome to HYDRA! 

        WARNING: You are entering the restricted area of Hydra.
                     Access credentials required:
"
